{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the DreamCoin platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user, typically the wallet address."
        },
        "walletAddress": {
          "type": "string",
          "description": "The user's Web3 wallet address."
        },
        "creationTimestamp": {
          "type": "string",
          "description": "Timestamp of when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "walletAddress"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a token swap transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the transaction."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Transaction)"
        },
        "fromToken": {
          "type": "string",
          "description": "The token being swapped from."
        },
        "toToken": {
          "type": "string",
          "description": "The token being swapped to (DreamCoin)."
        },
        "amount": {
          "type": "number",
          "description": "The amount of tokens swapped."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the transaction.",
          "format": "date-time"
        },
        "gasUsed": {
          "type": "number",
          "description": "The amount of gas used for the transaction."
        },
        "transactionHash": {
          "type": "string",
          "description": "The transaction hash."
        }
      },
      "required": [
        "id",
        "userId",
        "fromToken",
        "toToken",
        "amount",
        "timestamp"
      ]
    },
    "Reward": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Reward",
      "type": "object",
      "description": "Represents a reward earned by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the reward."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Reward)"
        },
        "rewardConfigId": {
          "type": "string",
          "description": "Reference to RewardConfig. (Relationship: RewardConfig 1:N Reward)"
        },
        "type": {
          "type": "string",
          "description": "The type of reward (e.g., Lagos Bonus, Cairo Reward)."
        },
        "amount": {
          "type": "number",
          "description": "The amount of DreamCoin awarded."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the reward was earned.",
          "format": "date-time"
        },
        "claimed": {
          "type": "boolean",
          "description": "Indicates whether the reward has been claimed."
        },
        "transactionId": {
          "type": "string",
          "description": "Reference to Transaction, if applicable. (Relationship: Transaction 1:N Reward)"
        }
      },
      "required": [
        "id",
        "userId",
        "type",
        "amount",
        "timestamp",
        "claimed"
      ]
    },
    "RewardConfig": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RewardConfig",
      "type": "object",
      "description": "Configuration for different reward types.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the reward configuration."
        },
        "type": {
          "type": "string",
          "description": "The type of reward (e.g., Lagos Bonus, Cairo Reward)."
        },
        "description": {
          "type": "string",
          "description": "Description of the reward and its trigger conditions."
        },
        "amount": {
          "type": "number",
          "description": "The amount of DreamCoin awarded for this reward type."
        }
      },
      "required": [
        "id",
        "type",
        "description",
        "amount"
      ]
    },
    "FlaggedUser": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FlaggedUser",
      "type": "object",
      "description": "Represents a user flagged for potential abuse.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the flagged user (same as User ID)."
        },
        "reason": {
          "type": "string",
          "description": "The reason why the user was flagged."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the user was flagged.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "reason",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": []
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. The document ID is the user's wallet address.",
          "params": [
            {
              "name": "userId",
              "description": "The wallet address of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores transaction data for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The wallet address of the user."
            },
            {
              "name": "transactionId",
              "description": "Unique identifier for the transaction."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/rewards/{rewardId}",
        "definition": {
          "entityName": "Reward",
          "schema": {
            "$ref": "#/backend/entities/Reward"
          },
          "description": "Stores reward data for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The wallet address of the user."
            },
            {
              "name": "rewardId",
              "description": "Unique identifier for the reward."
            }
          ]
        }
      },
      {
        "path": "/rewardConfigs/{rewardConfigId}",
        "definition": {
          "entityName": "RewardConfig",
          "schema": {
            "$ref": "#/backend/entities/RewardConfig"
          },
          "description": "Stores configuration for different reward types.",
          "params": [
            {
              "name": "rewardConfigId",
              "description": "Unique identifier for the reward configuration."
            }
          ]
        }
      },
      {
        "path": "/flaggedUsers/{flaggedUserId}",
        "definition": {
          "entityName": "FlaggedUser",
          "schema": {
            "$ref": "#/backend/entities/FlaggedUser"
          },
          "description": "Stores information about users flagged for potential abuse.",
          "params": [
            {
              "name": "flaggedUserId",
              "description": "The user ID of the flagged user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed for a Web3-centric application. User documents are keyed by their wallet address, which serves as the primary identifier. This removes the need for traditional authentication methods like email or social logins and aligns with the decentralized nature of the app."
  }
}
